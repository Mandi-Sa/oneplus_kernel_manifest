name: Kernel Build Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装必要工具
        run: |
          sudo apt update
          sudo apt install -y repo git build-essential bc libssl-dev flex bison \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            clang lld llvm

      - name: 初始化 repo 并同步代码
        run: |
          mkdir -p kernel_build
          cd kernel_build
          repo init -u https://github.com/wanwei1028/kernel_manifest.git -b main
          repo sync -j$(nproc)

      - name: 设置编译环境
        run: |
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CLANG_PATH=$(pwd)/kernel_build/kernel_platform/prebuilts/clang/host/linux-x86/bin
          export PATH=$CLANG_PATH:$PATH

      - name: 编译 OnePlus 13 (SM8750) 内核
        run: |
          cd kernel_build/kernel_platform/msm-kernel
          make O=out oneplus_defconfig
          make O=out -j$(nproc)

      - name: 检查编译结果
        run: |
          if [ -f kernel_build/kernel_platform/msm-kernel/out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "✅ 内核编译成功！"
          else
            echo "❌ 内核编译失败！请检查日志。" && exit 1
          fi

      - name: 生成 boot.img
        run: |
          cd kernel_build/kernel_platform/tools/mkbootimg
          ./mkbootimg --kernel ../msm-kernel/out/arch/arm64/boot/Image.gz-dtb \
                      --ramdisk path_to_ramdisk \
                      --dtb path_to_dtb \
                      --cmdline "console=ttyMSM0,115200n8" \
                      -o boot.img

      - name: 上传编译的 boot.img
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: kernel_build/kernel_platform/tools/mkbootimg/boot.img
